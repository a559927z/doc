package net.chinahrd.config;

import com.baomidou.mybatisplus.core.MybatisConfiguration;
import com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;
import com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor;
import net.chinahrd.common.constant.ServiceConstant;
import net.chinahrd.deployment.DynamicDataSource;
import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.type.JdbcType;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.core.env.Environment;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;

import javax.sql.DataSource;

/**
 * <p>
 *  手动配置业务数据源
 * </p>
 *
 * @author bright
 * @since 2019/3/15 11:10
 */
@Configuration
@MapperScan(basePackages = "net.chinahrd.modules.**.dao", sqlSessionTemplateRef = "businessSqlSessionTemplate") // 配置mybatis包扫描
public class BusinessDataSource {

    @Autowired
    private Environment env;

    @Bean
    @Lazy
    public DynamicDataSource getDynamicDataSource() {
        return new DynamicDataSource();
    }

    @Bean(name="businessData")
    public DataSource businessDataSource(){
        String deployment = env.getProperty("freeway.deployment");
        if (ServiceConstant.DEPLOYMENT_MULTIPLE.equals(deployment)) {
            return getDynamicDataSource();
        } else if (ServiceConstant.DEPLOYMENT_SINGLE.equals(deployment)) {
            DataSourceBuilder dataSourceBuilder = DataSourceBuilder.create();
            dataSourceBuilder.driverClassName(env.getProperty("spring.datasource.b.driver-class-name"));
            dataSourceBuilder.url(env.getProperty("spring.datasource.b.url"));
            dataSourceBuilder.username(env.getProperty("spring.datasource.b.username"));
            dataSourceBuilder.password(env.getProperty("spring.datasource.b.password"));
            return dataSourceBuilder.build();
        }
       return null;
    }

    /**
     * 创建会话工厂
     *
     * @param dataSource 数据源
     * @return 会话工厂
     */
    @Bean(name="businessSqlSessionFactory")
    public SqlSessionFactory businessSqlSessionFactory(@Qualifier("businessData") DataSource dataSource) throws Exception{
        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();
        bean.setDataSource(dataSource);
        bean.setTypeAliasesPackage(env.getProperty("mybatis.b.type-aliases-package"));

        MybatisConfiguration configuration = new MybatisConfiguration();
        configuration.setJdbcTypeForNull(JdbcType.NULL);
        configuration.setMapUnderscoreToCamelCase(true);
        configuration.setCacheEnabled(false);
        bean.setConfiguration(configuration);
        bean.setPlugins(new Interceptor[]{
                //new PaginationInterceptor(),
                new PerformanceInterceptor(),
                new OptimisticLockerInterceptor()
        });
        return bean.getObject();
    }

    @Bean(name = "businessTransactionManager")
    public DataSourceTransactionManager businessTransactionManager(@Qualifier("businessData") DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }

    @Bean(name = "businessSqlSessionTemplate")
    public SqlSessionTemplate businessSqlSessionTemplate(@Qualifier("businessSqlSessionFactory") SqlSessionFactory sqlSessionFactory) throws Exception {
        return new SqlSessionTemplate(sqlSessionFactory);
    }
}
